# Example rule spec configuration file

version: { major: 1; minor: 0; patch: 0; };

# Root for rule specs is a hash that must use the key 'rulespecs'
rulespecs: {
  AUTO-FREQ-SCALING-01: {
    examples = (
      {
        text: "automatic frequency scaling";
        docgen_filename: "AUTO-FREQ-SCALING-01.html"
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "System", "Performance" ];
    dynamic_category_flag = ["false", "false", "false"];
    message: "Design did not meet timing. An unscalable system clock did not meet its required target frequency. Please try specifying a kernel clock frequency lower than %s MHz using the '--kernel_frequency' switch for the next compilation. For all system clocks, this design is using %s nanoseconds as the threshold worst negative slack (WNS) value. List of system clocks with timing failure: %s"
    name: "Unscalable clock timing check";
    owner: "sdx";
    resolution: "The %URI feature allows user kernels to operate in hardware, even if at a lower frequency than intended. The compiler could not achieve the target kernel clock frequency or a scaled kernel clock frequency while still meeting timing for all unscalable clocks. An example of an unscalable clock is one used by IO components that depend on a fixed clock frequency. In addition, any clock not controllable at runtime by the runtime software is unscalable. Please refer to the platform documentation for a list of scalable/unscalable clock domains. Please note that slack values, including WNS values, have an associated sign. A negative slack value has certainly failed to meet timing. A zero or positive slack value typically passes the timing check, the possible exception being when the threshold value is also a positive value.";
    session_names: ("hw");
    severity: "Error";
  };
  AUTO-FREQ-SCALING-02: {
    examples = (
      {
        text: "minimum";
        docgen_filename: "AUTO-FREQ-SCALING-02.html"
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "xclbin", "Performance" ];
    dynamic_category_flag = ["false", "true", "false"];
    message: "Auto frequency scaling failed. The kernel clock %REF has an original frequency equal to %s MHz. The auto scaled frequency %s MHz is lower than the minimum frequency limit supported by the runtime (%s MHz)."
    name: "Auto frequency scaling - Kernel clock minimum (MHz)";
    owner: "sdx";
    resolution: "The automatic frequency scaling feature allows user kernels to operate in hardware, even if at a lower frequency than intended. Nothing slower than the %URI can operate in hardware.";
    session_names: ("hw");
    severity: "Error";
  };
  AUTO-FREQ-SCALING-03: {
    affirm: "The maximum frequency supported by the runtime is %s MHz, which this design achieved. The kernel clock %REF has an original frequency equal to %s MHz. The auto scaled frequency %s MHz exceeds the maximum frequency limit supported by the runtime. The compiler will not select a frequency value higher than the runtime maximum.";
    description: {
      scheme: "DATA";
      media_type: "text/html";
      encoding: "charset=UTF-8";
      data: "<html>min(auto scaled freq, max runtime supported freq)</html>";
    };
    expects: "= or >";
    examples = (
      {
        text: "automatic frequency scaling";
        docgen_filename: "AUTO-FREQ-SCALING-03.html"
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "xclbin", "Performance" ];
    dynamic_category_flag = ["false", "true", "false"];
    message: "Auto frequency scaling failed. The kernel clock %REF has an original frequency equal to %s MHz. The auto scaled frequency %s MHz exceeds the maximum frequency limit supported by the runtime. The frequency has been automatically changed to %s MHz.";
    name: "Auto frequency scaling - Kernel clock maximum (MHz)";
    owner: "sdx";
    resolution: "The %URI feature allows user kernels to operate in hardware, even if at a lower frequency than intended.";
    session_names: ("hw");
    severity: "Warning";
  };
  AUTO-FREQ-SCALING-04: {
    examples = (
      {
        text: "This page";
        docgen_filename: "AUTO-FREQ-SCALING-04.html"
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "xclbin", "Performance" ];
    dynamic_category_flag = ["false", "true", "false"];
    message: "One or more timing paths failed timing requirements. The kernel clock %REF has an original frequency equal to %s MHz. The frequency has been automatically changed to %s MHz to enable proper functionality. The clock Id is %s.";
    name: "Auto frequency scaling - Kernel timing failure";
    owner: "sdx";
    resolution: "The automatic frequency scaling feature allows user kernels to operate in hardware, even if at a lower frequency than intended. %URI describes how to examine timing path violations.";
    session_names: ("hw");
    severity: "Warning";
  };
  AUTO-FREQ-SCALING-05: {
    examples = (
      {
        text: "minimum";
        docgen_filename: "AUTO-FREQ-SCALING-05.html"
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "System", "Performance" ];
    dynamic_category_flag = ["false", "false", "false"];
    message: "Auto frequency scaling failed. The system clock %REF has an original frequency equal to %s MHz. The auto scaled frequency %s MHz is lower than the minimum frequency limit supported by the runtime (%s MHz)."
    name: "Auto frequency scaling - System clock minimum (MHz)";
    owner: "sdx";
    resolution: "The automatic frequency scaling feature allows user kernels to operate in hardware, even if at a lower frequency than intended. Nothing slower than the %URI can operate in hardware.";
    session_names: ("hw");
    severity: "Error";
  };
  AUTO-FREQ-SCALING-06: {
    affirm: "The maximum frequency supported by the runtime is %s MHz, which this design achieved. The system clock %REF has an original frequency equal to %s MHz. The auto scaled frequency %s MHz exceeds the maximum frequency limit supported by the runtime. The compiler will not select a frequency value higher than the runtime maximum.";
    description: {
      scheme: "DATA";
      media_type: "text/html";
      encoding: "charset=UTF-8";
      data: "<html>min(auto scaled freq, max runtime supported freq)</html>";
    };
    expects: "= or >";
    examples = (
      {
        text: "automatic frequency scaling";
        docgen_filename: "AUTO-FREQ-SCALING-06.html"
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "System", "Performance" ];
    dynamic_category_flag = ["false", "false", "false"];
    message: "Auto frequency scaling failed. The system clock %REF has an original frequency equal to %s MHz. The auto scaled frequency %s MHz exceeds the maximum frequency limit supported by the runtime. The frequency has been automatically changed to %s MHz.";
    name: "Auto frequency scaling - System clock maximum (MHz)";
    owner: "sdx";
    resolution: "The %URI feature allows user kernels to operate in hardware, even if at a lower frequency than intended.";
    session_names: ("hw");
    severity: "Warning";
  };
  AUTO-FREQ-SCALING-07: {
    examples = (
      {
        text: "This page";
        docgen_filename: "AUTO-FREQ-SCALING-07.html"
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "System", "Performance" ];
    dynamic_category_flag = ["false", "false", "false"];
    message: "One or more timing paths failed timing requirements. The system clock %REF has an original frequency equal to %s MHz. The frequency has been automatically changed to %s MHz to enable proper functionality.";
    name: "Auto frequency scaling - System timing failure";
    owner: "sdx";
    resolution: "The automatic frequency scaling feature allows user kernels to operate in hardware, even if at a lower frequency than intended. %URI describes how to resolve issues identified as system timing violations.";
    session_names: ("hw");
    severity: "Warning";
  };
  AUTO-FREQ-SCALING-08: {
    examples = (
      {
        text: "setting";
        docgen_filename: "AUTO-FREQ-SCALING-08.html"
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "xclbin", "Performance" ];
    dynamic_category_flag = ["false", "true", "false"];
    message: "For clock %REF, the auto scaled frequency %s MHz exceeds the original specified frequency. The compiler will select the original specified frequency of %s MHz.";
    name: "Auto frequency scaling - Higher frequency possible";
    owner: "sdx";
    resolution: "The automatic frequency scaling feature allows user kernels to operate in hardware, even if at a lower frequency than intended. In this case the clock may in fact be able to run at a higher frequency than specified. You may want to consider %URI the clock frequency higher for better performance. The '--kernel_frequency' option is one way to control the frequency specification.";
    session_names: ("hw");
    severity: "Advisory";
  };
  ACCELERATOR-FIT-01: {
    examples = (
      {
        text: "This page";
        docgen_filename: "ACCELERATOR-FIT-01.html";
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "Kernel", "Resource", "DSP" ];
    dynamic_category_flag = ["false", "false", "false", "false"];
    message: "The design requires more DSP resources elements than are available. The total number of DSP blocks required by all kernels is %d, out of %d available (utilization threshold %f).";
    name: "Accelerator fit - DSP resources";
    owner: "sdx";
    resolution: "Xilinx FPGAs and programmable SoCs are ideal for high-performance or multi-channel digital signal processing (DSP) applications that can take advantage of hardware parellelism. %URI describes how to potentially reduce the number of DSP blocks required for all kernels by utilizing sharing of operations.";
    session_names: ("hw");
    severity: "Critical Warning";
  };
  ACCELERATOR-FIT-02: {
    examples = (
      {
        text: "This page";
        docgen_filename: "ACCELERATOR-FIT-02.html";
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "Kernel", "Resource", "Local Memory" ];
    dynamic_category_flag = ["false", "false", "false", "false"];
    message: "The design requires more BlockRAM resources than are available. The total number of BlockRAM elements required by all kernels is %f, out of %f available (utilization threshold %f). ";
    name: "Accelerator fit - BlockRAM resources";
    owner: "sdx";
    resolution: "A BlockRAM is an internal memory resource that can be configured in a variety of sizes. Almost every design built within an FPGA requires the use of internal memory resources of some size for storage of coefficients, buffering of data, and a variety of other uses. %URI describes ways to reduce the number of required BlockRAM resources.";
    session_names: ("hw");
    severity: "Critical Warning";
  };
  ACCELERATOR-FIT-03: {
    examples = (
      {
        text: "This page";
        docgen_filename: "ACCELERATOR-FIT-03.html";
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "Kernel", "Resource", "Registers" ];
    dynamic_category_flag = ["false", "false", "false", "false"];
    message: "The design requires more synchronous storage elements than are available. The total number of registers required by all kernels is %d, out of %d available (utilization threshold %f). ";
    name: "Accelerator fit - synchronous storage elements";
    owner: "sdx";
    resolution: "The acceleration logic needs to use fewer synchronous storage element resources. %URI describes how to influence the register count of an implementation.";
    session_names: ("hw");
    severity: "Critical Warning";
  };
  ACCELERATOR-FIT-04: {
    examples = (
      {
        text: "This page";
        docgen_filename: "ACCELERATOR-FIT-04.html";
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "Kernel", "Resource", "LUT" ];
    dynamic_category_flag = ["false", "false", "false", "false"];
    message: "The design requires more look-up table elements than are available. The total number of LUT resources required by all kernels is %d, out of %d available (utilization threshold %f). ";
    name: "Accelerator fit - look-up table resources";
    owner: "sdx";
    resolution: "The acceleration logic needs to use fewer LUT resources. %URI describes how to reduce LUT resource requirements.";
    session_names: ("hw");
    severity: "Critical Warning";
  };
  PLATFORM-CLOCK-DOMAINS-01: {
    affirm: "The compiler selected the following frequencies for the runtime controllable kernel clock(s) and scalable system clock(s): %s";
    description: {
      scheme: "DATA";
      media_type: "text/html";
      encoding: "charset=UTF-8";
      data: "<html> Kernel clocks (and system clocks for some platforms) are scalable; they can preserve functionality at the cost of performance by running at a lower frequency than requested. To be scalable, a clock must be driven by an MMCM where the control registers for the MMCM can be set by the runtime over AXI4-Lite. This item shows the final runtime controlled frequencies for the scalable clocks.</html>";
    };
    expects: "= or >";
    examples = (
      {
        text: "automatic frequency scaling";
        docgen_filename: "PLATFORM-CLOCK-DOMAINS-01.html"
      }
    );
    first_release: "2018.2";
    parent_path = [ "Accelerator", "System", "Performance" ];
    dynamic_category_flag = ["false", "false", "false"];
    message: "One or more clocks failed a timing check.";
    name: "Runtime controllable clock domains - Achieved clock frequency (MHz)";
    owner: "sdx";
    resolution: "The %URI feature allows user kernels to operate in hardware, even if at a lower frequency than intended.";
    session_names: ("hw");
    severity: "Warning";
  };
  IP-LOCK-01: {
    examples = (
      {
        text: "UG896";
        scheme: "HTTPS";
        path: "www.xilinx.com/support/documentation/sw_manuals/xilinx2019_2/ug896-vivado-ip.pdf";
      },
      {
        text: "results of report IP status";
        scheme: "FILE";
        path: "/proj/xcohdstaff/mkeilson/nobkup/workspace2/iptest/Emulation-HW/vector_addition.build/link/vivado/vpl/link_guidance.txt";
      }
    );
    first_release: "2019.2";
    parent_path = [ "System", "Link", "IP" ];
    dynamic_category_flag = ["false", "false", "false"];
    message: "In your vivado project:%s for design:%s the IP %s is locked. The IP is locked for the following reason - %s.";
    name: "IP - Locked IP";
    owner: "vitis";
    resolution: "Check the IP and the install area for the latest version of the IPs. For additional information about designing with IP - refer to %URI. In vivado you can run the report_ip_status Tcl command for additional information. In addition, the %URI can be viewed.";
    session_names: ("hw");
    severity: "Warning";
  };
  ACCELERATOR-SLR-01: {
    examples = (
      {
        text: "This page";
        docgen_filename: "ACCELERATOR-SLR-01.html"
      }
    );
    first_release: "2021.1";
    parent_path = [ "Accelerator", "System", "Performance" ];
    dynamic_category_flag = ["false", "false", "false"];
    message: "The compute unit %REF is located in %s while its port %REF is connected to a memory in %s.";
    name: "SLR assignments and memory connectivity";
    owner: "vitis";
    resolution: "Consider using a memory located in the same SLR, especially if not adjacent. In the [connectivity] section of your config file, use the 'slr' and 'sp' keywords (e.g., slr=vadd1:SLR0, sp=vadd1.a:DDR[0]).";
    session_names: ("hw");
    severity: "Warning";
  };
  PROFILING-01: {
    examples = (
      {
        text: "This page";
        docgen_filename: "PROFILING-01.html"
      }
    );
    first_release: "2019.1";
    parent_path = [ "Accelerator", "System", "Performance" ];
    dynamic_category_flag = ["false", "false", "false"];
    message: "Unable to extract profiling metadata. No profiling inserted.";
    name: "Profile insertion";
    owner: "vitis";
    resolution: "Ensure target shell is configured correctly for profile insertion.";
    session_names: ("hw");
    severity: "Critical Warning";
  };
  PROFILING-02: {
    examples = (
      {
        text: "This page";
        docgen_filename: "PROFILING-02.html"
      }
    );
    first_release: "2020.2";
    parent_path = [ "Accelerator", "System", "Performance" ];
    dynamic_category_flag = ["false", "false", "false"];
    message: "Unable to support %d monitors. Limiting to %d.";
    name: "Maximum profile monitors";
    owner: "vitis";
    resolution: "Request less monitors using [profile] section of config file. Avoid using data=all:all:all and instead specify critical elements, e.g., data=<kernel>:<compute unit>:<port>.";
    session_names: ("hw");
    severity: "Critical Warning";
  };
  PROFILING-03: {
    examples = (
      {
        text: "This page";
        docgen_filename: "PROFILING-03.html"
      }
    );
    first_release: "2021.1";
    parent_path = [ "Accelerator", "System", "Performance" ];
    dynamic_category_flag = ["false", "false", "false"];
    message: "You requested %d trace monitors, which can potentially lead to dropped packets.";
    name: "Large amount of trace monitors";
    owner: "vitis";
    resolution: "Request less monitors using [profile] section of config file. Avoid using data=all:all:all and instead specify critical elements, e.g., data=<kernel>:<compute unit>:<port>. Monitors can also be specified as counters-only by adding ':counters' to the request.";
    session_names: ("hw");
    severity: "Warning";
  };
  AIE-TRACE-01: {
    examples = (
      {
        text: "This page";
        docgen_filename: "AIE-TRACE-01.html"
      }
    );
    first_release: "2020.2";
    parent_path = [ "Accelerator", "System", "AI Engines" ];
    dynamic_category_flag = ["false", "false", "false"];
    affirm: "AI Engine trace estimated bandwidth of %d MB/s is below NoC limits on device.";
    message: "Reached limits of NoC QoS on device. Reduced total QoS for AIE trace to %d MB/s.";
    name: "AI Engine trace NoC QoS limit";
    owner: "vitis";
    resolution: "Consider scaling back the trace configuration level specified by aiecompiler --event-trace=<value>.";
    session_names: ("hw");
    severity: "Warning";
  };
  AIE-TRACE-02: {
    examples = (
      {
        text: "This page";
        docgen_filename: "AIE-TRACE-02.html"
      }
    );
    first_release: "2020.2";
    parent_path = [ "Accelerator", "System", "AI Engines" ];
    dynamic_category_flag = ["false", "false", "false"];
    affirm: "Calculated %d data movers to support %d streams with an estimated bandwidth of %d MB/s.";
    message: "Limited to %d data movers (one per stream) to support an estimated bandwidth of %d MB/s.";
    name: "AI Engine trace data movers";
    owner: "vitis";
    resolution: "If trace overflow issues occur at runtime, then you might need to specify more streams using aiecompiler --num-trace-streams=<int> to increase the available bandwidth.";
    session_names: ("hw");
    severity: "Warning";
  };
  AIE-TRACE-03: {
    examples = (
      {
        text: "This page";
        docgen_filename: "AIE-TRACE-03.html"
      }
    );
    first_release: "2020.2";
    parent_path = [ "Accelerator", "System", "AI Engines" ];
    dynamic_category_flag = ["false", "false", "false"];
    affirm: "AI Engine trace stream %d has a width of %d bits and an estimated bandwidth of %d MB/s.";
    message: "AI Engine trace stream %d has a width of %d bits and an estimated bandwidth of %d MB/s.";
    name: "AI Engine trace bandwidth";
    owner: "vitis";
    resolution: "If trace overflow issues occur at runtime, consider more streams using aiecompiler --num-trace-streams=<int> or wider streams using aiecompiler --trace-plio-width=<int> to increase available bandwidth.";
    session_names: ("hw");
    severity: "Warning";
  };
  AIE-TRACE-04: {
    examples = (
      {
        text: "This page";
        docgen_filename: "AIE-TRACE-04.html"
      }
    );
    first_release: "2020.2";
    parent_path = [ "Accelerator", "System", "AI Engines" ];
    dynamic_category_flag = ["false", "false", "false"];
    affirm: "AIE trace data mover %d is connected to %d streams with a write QoS of %d MB/s.";
    message: "AIE trace data mover %d is connected to %d streams with a write QoS of %d MB/s.";
    name: "AI Engine trace data mover QoS";
    owner: "vitis";
    resolution: "If trace overflow issues occur at runtime, then you might need to specify compiler.aieTraceEventPacketRate to increase the requested bandwidth.";
    session_names: ("hw");
    severity: "Warning";
  };
  AIE-TRACE-05: {
    examples = (
      {
        text: "This page";
        docgen_filename: "AIE-TRACE-05.html"
      }
    );
    first_release: "2020.2";
    parent_path = [ "Accelerator", "System", "AI Engines" ];
    dynamic_category_flag = ["false", "false", "false"];
    affirm: "All %d requested AIE trace streams were used.";
    message: "Only %d out of %d AIE trace streams were used.";
    name: "AI Engine trace streams";
    owner: "vitis";
    resolution: "Unused trace streams can potentially lead to timing issues. Either specify less streams (i.e., aiecompiler --num-trace-streams=<int>) or use advanced mapping options to better distribute tiles and trace.";
    session_names: ("hw");
    severity: "Warning";
  };
};
